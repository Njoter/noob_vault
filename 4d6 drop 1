#include <stdio.h>
#include <cs50.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <ctype.h>

// Function prototype for 4d6D1
int DiceRoll(void);

// Function prototype comparing elements in array
int cmpfunc (const void * a, const void * b);

int main(void)
{
    int attributes[6];
    char r;
    for (int i = 0; i < 6; i++)
    {
        do
        {
            r = get_char("Press R to roll ");
        }
        while (r != 'r' && r != 'R');
        int roll = DiceRoll();
        printf("%i\n", roll);

        string a;
        do
        {
            a = get_string("Assign %i to Str, Con, Dex, Int, Wis or Cha? ", roll);
            for (int j = 0; a[j]; j++)
            {
                a[j] = tolower(a[j]);
            }
        }
        while (strcmp(a, "str") && (strcmp(a, "con") && (strcmp(a, "dex") && (strcmp(a, "int") && (strcmp(a, "wis") && strcmp(a, "cha"))))) != 0);

        if (strcmp(a, "str") == 0)
        {
            attributes[0] = roll;
            printf("%i to Strenght\n\n", roll);
        }
        else if (strcmp(a, "con") == 0)
        {
            attributes[1] = roll;
            printf("%i to Constitution\n\n", roll);
        }
        else if (strcmp(a, "dex") == 0)
        {
            attributes[2] = roll;
            printf("%i to Dexterity\n\n", roll);
        }
        else if (strcmp(a, "int") == 0)
        {
            attributes[3] = roll;
            printf("%i to Inteligence\n\n", roll);
        }
        else if (strcmp(a, "wis") == 0)
        {
            attributes[4] = roll;
            printf("%i to Wisdom\n\n", roll);
        }
        else
        {
            attributes[5] = roll;
            printf("%i to Charisma\n\n", roll);
        }
    }

    printf("Strength = %i\nConstitution = %i\nDexterity = %i\nIntelligence = %i\nWisdom = %i\nCharisma = %i\n", attributes[0], attributes[1], attributes[2], attributes[3], attributes[4], attributes[5]);
}

// Funtion for 4d6D1
int DiceRoll(void)
// To seed rand
{
    srand(time(NULL));

// Dice rolls
    int n = 4;
    int dice[n];

    for (int i = 0; i < n; i++)
    {
        dice[i] = (rand() % 6) + 1;
    }

// Sort in ascending order
    qsort(dice, n, sizeof(int), cmpfunc);

// add the three highest
    int t = 0;
    for (int i = 1; i < n; i++)
    {
        t += (dice[i]);
    }
    return t;
}

// Function for comparing elements in array
int cmpfunc (const void * a, const void * b)
{
    return ( *(int*)a - *(int*)b );
}
